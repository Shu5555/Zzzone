// Mocks generated by Mockito 5.4.6 from annotations
// in sleep_management_app/test/services/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sleep_management_app/models/gacha_pull_record.dart' as _i5;
import 'package:sleep_management_app/models/sleep_record.dart' as _i2;
import 'package:sleep_management_app/services/database_helper_interface.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeSleepRecord_0 extends _i1.SmartFake implements _i2.SleepRecord {
  _FakeSleepRecord_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [IDatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDatabaseHelper extends _i1.Mock implements _i3.IDatabaseHelper {
  MockIDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SleepRecord> create(_i2.SleepRecord? record) =>
      (super.noSuchMethod(
            Invocation.method(#create, [record]),
            returnValue: _i4.Future<_i2.SleepRecord>.value(
              _FakeSleepRecord_0(this, Invocation.method(#create, [record])),
            ),
          )
          as _i4.Future<_i2.SleepRecord>);

  @override
  _i4.Future<_i2.SleepRecord?> readRecord(String? dataId) =>
      (super.noSuchMethod(
            Invocation.method(#readRecord, [dataId]),
            returnValue: _i4.Future<_i2.SleepRecord?>.value(),
          )
          as _i4.Future<_i2.SleepRecord?>);

  @override
  _i4.Future<List<_i2.SleepRecord>> readAllRecords() =>
      (super.noSuchMethod(
            Invocation.method(#readAllRecords, []),
            returnValue: _i4.Future<List<_i2.SleepRecord>>.value(
              <_i2.SleepRecord>[],
            ),
          )
          as _i4.Future<List<_i2.SleepRecord>>);

  @override
  _i4.Future<List<_i2.SleepRecord>> readRecordsForLastNDays(int? days) =>
      (super.noSuchMethod(
            Invocation.method(#readRecordsForLastNDays, [days]),
            returnValue: _i4.Future<List<_i2.SleepRecord>>.value(
              <_i2.SleepRecord>[],
            ),
          )
          as _i4.Future<List<_i2.SleepRecord>>);

  @override
  _i4.Future<List<_i2.SleepRecord>> readRecordsForMonth(
    int? year,
    int? month,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#readRecordsForMonth, [year, month]),
            returnValue: _i4.Future<List<_i2.SleepRecord>>.value(
              <_i2.SleepRecord>[],
            ),
          )
          as _i4.Future<List<_i2.SleepRecord>>);

  @override
  _i4.Future<int> update(_i2.SleepRecord? record) =>
      (super.noSuchMethod(
            Invocation.method(#update, [record]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> delete(String? dataId) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [dataId]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteAllRecords() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAllRecords, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<_i2.SleepRecord?> getLatestRecord() =>
      (super.noSuchMethod(
            Invocation.method(#getLatestRecord, []),
            returnValue: _i4.Future<_i2.SleepRecord?>.value(),
          )
          as _i4.Future<_i2.SleepRecord?>);

  @override
  _i4.Future<List<_i2.SleepRecord>> getLatestRecords({int? limit = 3}) =>
      (super.noSuchMethod(
            Invocation.method(#getLatestRecords, [], {#limit: limit}),
            returnValue: _i4.Future<List<_i2.SleepRecord>>.value(
              <_i2.SleepRecord>[],
            ),
          )
          as _i4.Future<List<_i2.SleepRecord>>);

  @override
  _i4.Future<_i2.SleepRecord?> getRecordForDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getRecordForDate, [date]),
            returnValue: _i4.Future<_i2.SleepRecord?>.value(),
          )
          as _i4.Future<_i2.SleepRecord?>);

  @override
  _i4.Future<bool> addUnlockedQuote(String? quoteId) =>
      (super.noSuchMethod(
            Invocation.method(#addUnlockedQuote, [quoteId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<String>> getUnlockedQuoteIds() =>
      (super.noSuchMethod(
            Invocation.method(#getUnlockedQuoteIds, []),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<void> addGachaPull(String? quoteId, String? rarityId) =>
      (super.noSuchMethod(
            Invocation.method(#addGachaPull, [quoteId, rarityId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.GachaPullRecord>> getGachaHistory() =>
      (super.noSuchMethod(
            Invocation.method(#getGachaHistory, []),
            returnValue: _i4.Future<List<_i5.GachaPullRecord>>.value(
              <_i5.GachaPullRecord>[],
            ),
          )
          as _i4.Future<List<_i5.GachaPullRecord>>);

  @override
  _i4.Future<void> markAnnouncementsAsRead(List<String>? announcementIds) =>
      (super.noSuchMethod(
            Invocation.method(#markAnnouncementsAsRead, [announcementIds]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<Set<String>> getReadAnnouncementIds() =>
      (super.noSuchMethod(
            Invocation.method(#getReadAnnouncementIds, []),
            returnValue: _i4.Future<Set<String>>.value(<String>{}),
          )
          as _i4.Future<Set<String>>);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
